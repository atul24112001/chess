// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  token        String?
  rating       Int      @default(1000)
  gamesAsWhite Game[]   @relation("GamesAsWhite")
  gamesAsBlack Game[]   @relation("GamesAsBlack")
  createdAt    DateTime @default(now())
  moves        Move[]
  updatedAt    DateTime @default(now()) @updatedAt
}

model Game {
  id            String      @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  whitePlayer   User        @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User        @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
  winner        GameResult?
  status        GameStatus  @default(IN_PROGRESS)
  moves         Move[]
  message       String      @default("Checkmate")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Move {
  id     String @id @default(uuid())
  gameId String
  game   Game   @relation(fields: [gameId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])
  from   String
  to     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIME_UP
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}
